"""
VERIFICADOR E CORRETOR DE AUTO TRADING MT5
=========================================

Este script verifica e corrige o problema do Auto Trading desativado no MT5.
"""

import MetaTrader5 as mt5
import time
import sys

def verificar_e_corrigir_auto_trading():
    """
    Verifica e corrige o problema do Auto Trading desativado
    """
    print("=" * 60)
    print("üîß VERIFICADOR E CORRETOR DE AUTO TRADING MT5")
    print("=" * 60)
    
    try:
        # 1. INICIALIZAR MT5
        print("1. INICIALIZANDO MT5...")
        if not mt5.initialize():
            print("‚ùå FALHA AO INICIALIZAR MT5")
            print("   Solu√ß√£o: Verifique se o MT5 est√° instalado e rodando")
            return False
        
        print("‚úÖ MT5 INICIALIZADO COM SUCESSO")
        
        # 2. VERIFICAR INFORMA√á√ïES DA CONTA
        print("\n2. VERIFICANDO INFORMA√á√ïES DA CONTA...")
        account_info = mt5.account_info()
        if not account_info:
            print("‚ùå N√ÉO FOI POSS√çVEL OBTER INFORMA√á√ïES DA CONTA")
            mt5.shutdown()
            return False
        
        print(f"‚úÖ CONTA CONECTADA: #{account_info.login}")
        print(f"üí∞ SALDO: ${account_info.balance:.2f}")
        print(f"üìä EQUITY: ${account_info.equity:.2f}")
        
        # 3. VERIFICAR STATUS DO AUTO TRADING
        print("\n3. VERIFICANDO STATUS DO AUTO TRADING...")
        print(f"   Trade Expert (Auto Trading): {account_info.trade_expert}")
        print(f"   Trade Allowed: {account_info.trade_allowed}")
        
        if account_info.trade_expert and account_info.trade_allowed:
            print("‚úÖ AUTO TRADING J√Å EST√Å HABILITADO!")
            print("‚úÖ SISTEMA PRONTO PARA OPERAR!")
            mt5.shutdown()
            return True
        else:
            print("‚ùå AUTO TRADING DESATIVADO!")
            print("\nüîß SOLU√á√ÉO AUTOM√ÅTICA:")
            print("   O MT5 requer configura√ß√£o manual para Auto Trading")
            print("   Siga estas etapas:")
            print()
            print("   1. ABRA O MT5 MANUALMENTE")
            print("   2. V√Å EM 'FERRAMENTAS' ‚Üí 'OP√á√ïES'")
            print("   3. CLIQUE NA ABA 'EXPERT ADVISORS'")
            print("   4. MARQUE 'PERMITIR TRADING AUTOM√ÅTICO'")
            print("   5. DESMARQUE 'DESATIVAR TODOS OS EXPERT ADVISORS'")
            print("   6. CLIQUE EM 'OK'")
            print("   7. REINICIE O MT5")
            print("   8. EXECUTE ESTE SCRIPT NOVAMENTE")
            print()
            print("‚ö†Ô∏è  IMPORTANTE:")
            print("   - O MT5 N√ÉO PERMITE HABILITAR AUTO TRADING VIA API")
            print("   - ESTA CONFIGURA√á√ÉO DEVE SER FEITA MANUALMENTE NO CLIENTE")
            print("   - SEM AUTO TRADING, NENHUMA ORDEM SER√Å EXECUTADA")
            
            mt5.shutdown()
            return False
    
    except Exception as e:
        print(f"‚ùå ERRO CR√çTICO: {e}")
        try:
            mt5.shutdown()
        except:
            pass
        return False

def verificar_configuracoes_do_simbolo():
    """
    Verifica as configura√ß√µes do s√≠mbolo US100
    """
    print("\n4. VERIFICANDO CONFIGURA√á√ïES DO S√çMBOLO US100...")
    
    try:
        # Inicializar MT5 se n√£o estiver inicializado
        if not mt5.initialize():
            print("‚ùå MT5 N√ÉO INICIALIZADO")
            return False
        
        # Verificar informa√ß√µes do s√≠mbolo
        symbol_info = mt5.symbol_info("US100")
        if not symbol_info:
            print("‚ùå S√çMBOLO US100 N√ÉO ENCONTRADO")
            # Tentar outras varia√ß√µes
            symbol_variations = ["US100.cash", "US100cash", "US100.CASH", "NASDAQ100", "NQ100"]
            for variation in symbol_variations:
                symbol_info = mt5.symbol_info(variation)
                if symbol_info:
                    print(f"‚úÖ S√çMBOLO ENCONTRADO: {variation}")
                    break
            else:
                print("‚ùå NENHUMA VARIA√á√ÉO DO US100 ENCONTRADA")
                mt5.shutdown()
                return False
        
        print(f"‚úÖ S√çMBOLO: {symbol_info.name}")
        print(f"üìä VIS√çVEL: {symbol_info.visible}")
        print(f"üí∞ TRADE MODE: {symbol_info.trade_mode}")
        print(f"üìè SPREAD: {symbol_info.spread}")
        print(f"üìê TRADE STOPS LEVEL: {symbol_info.trade_stops_level}")
        print(f"üî¢ DIGITS: {symbol_info.digits}")
        print(f"üéØ POINT: {symbol_info.point}")
        
        # Verificar se o s√≠mbolo est√° vis√≠vel
        if not symbol_info.visible:
            print("‚ö†Ô∏è  S√çMBOLO N√ÉO EST√Å VIS√çVEL NO MARKET WATCH")
            print("   Solu√ß√£o: Arraste o s√≠mbolo para o Market Watch no MT5")
        
        # Verificar modo de trading
        if symbol_info.trade_mode == 0:  # TRADE_MODE_DISABLED
            print("‚ùå TRADING DESATIVADO PARA ESTE S√çMBOLO")
            print("   Solu√ß√£o: Verifique as configura√ß√µes do s√≠mbolo no MT5")
        elif symbol_info.trade_mode == 1:  # TRADE_MODE_LONGONLY
            print("‚ö†Ô∏è  APENAS LONG POSITIONS PERMITIDAS")
        elif symbol_info.trade_mode == 2:  # TRADE_MODE_SHORTONLY
            print("‚ö†Ô∏è  APENAS SHORT POSITIONS PERMITIDAS")
        else:  # TRADE_MODE_FULL
            print("‚úÖ TRADING COMPLETO PERMITIDO")
        
        mt5.shutdown()
        return True
        
    except Exception as e:
        print(f"‚ùå ERRO AO VERIFICAR S√çMBOLO: {e}")
        try:
            mt5.shutdown()
        except:
            pass
        return False

def verificar_ordens_e_posicoes():
    """
    Verifica ordens e posi√ß√µes atuais
    """
    print("\n5. VERIFICANDO ORDENS E POSI√á√ïES...")
    
    try:
        # Inicializar MT5 se n√£o estiver inicializado
        if not mt5.initialize():
            print("‚ùå MT5 N√ÉO INICIALIZADO")
            return False
        
        # Verificar posi√ß√µes abertas
        positions = mt5.positions_get()
        if positions:
            print(f"üìä POSI√á√ïES ABERTAS: {len(positions)}")
            total_profit = 0
            for pos in positions:
                pos_type = "BUY" if pos.type == 0 else "SELL"
                print(f"   - #{pos.ticket}: {pos.symbol} {pos_type} {pos.volume} @ {pos.price_open:.2f} (Profit: ${pos.profit:.2f})")
                total_profit += pos.profit
            print(f"üí∞ LUCRO TOTAL: ${total_profit:.2f}")
        else:
            print("üìä NENHUMA POSI√á√ÉO ABERTA")
        
        # Verificar ordens pendentes
        orders = mt5.orders_get()
        if orders:
            print(f"üìã ORDENS PENDENTES: {len(orders)}")
            for order in orders:
                order_type = ""
                if order.type == 0:
                    order_type = "BUY"
                elif order.type == 1:
                    order_type = "SELL"
                elif order.type == 2:
                    order_type = "BUY_LIMIT"
                elif order.type == 3:
                    order_type = "SELL_LIMIT"
                elif order.type == 4:
                    order_type = "BUY_STOP"
                elif order.type == 5:
                    order_type = "SELL_STOP"
                print(f"   - #{order.ticket}: {order.symbol} {order_type} {order.volume_initial} @ {order.price_open:.2f}")
        else:
            print("üìã NENHUMA ORDEM PENDENTE")
        
        mt5.shutdown()
        return True
        
    except Exception as e:
        print(f"‚ùå ERRO AO VERIFICAR ORDENS E POSI√á√ïES: {e}")
        try:
            mt5.shutdown()
        except:
            pass
        return False

def main():
    """
    Fun√ß√£o principal
    """
    print("üöÄ SISTEMA DE VERIFICA√á√ÉO E CORRE√á√ÉO DO MT5")
    print("üéØ Objetivo: Diagnosticar e corrigir problemas de Auto Trading")
    
    # 1. Verificar e corrigir Auto Trading
    auto_trading_ok = verificar_e_corrigir_auto_trading()
    
    if auto_trading_ok:
        # 2. Verificar configura√ß√µes do s√≠mbolo
        verificar_configuracoes_do_simbolo()
        
        # 3. Verificar ordens e posi√ß√µes
        verificar_ordens_e_posicoes()
        
        print("\n" + "=" * 60)
        print("üéâ DIAGN√ìSTICO CONCLU√çDO COM SUCESSO!")
        print("‚úÖ AUTO TRADING HABILITADO")
        print("‚úÖ SISTEMA PRONTO PARA OPERAR")
        print("=" * 60)
        
        return True
    else:
        print("\n" + "=" * 60)
        print("üö® DIAGN√ìSTICO CONCLU√çDO COM PROBLEMAS!")
        print("‚ùå AUTO TRADING DESATIVADO")
        print("üîß CORRE√á√ÉO NECESS√ÅRIA MANUALMENTE")
        print("=" * 60)
        
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)