#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de depura√ß√£o para entender por que os agentes n√£o est√£o negociando
"""

import sys
import os
import MetaTrader5 as mt5
from datetime import datetime
import pytz
import logging

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def testar_conexao_basica():
    """Testar conex√£o b√°sica com o MT5"""
    print("=== TESTE DE CONEX√ÉO B√ÅSICA ===")
    
    # Verificar credenciais
    login = os.getenv("MT5_LOGIN")
    server = os.getenv("MT5_SERVER")
    password = os.getenv("MT5_PASSWORD")
    
    print(f"Login: {login}")
    print(f"Server: {server}")
    print(f"Senha configurada: {'Sim' if password else 'N√£o'}")
    
    if not all([login, server, password]):
        print("‚ùå Credenciais n√£o configuradas corretamente!")
        return False
    
    # Tentar conex√£o
    try:
        # Fechar conex√£o anterior se existir
        mt5.shutdown()
    except:
        pass
    
    if not mt5.initialize():
        print("‚ùå Falha na inicializa√ß√£o do MT5")
        return False
    
    print("‚úÖ MT5 inicializado")
    
    if not mt5.login(int(login), password, server):
        print("‚ùå Falha no login")
        return False
    
    print("‚úÖ Login realizado com sucesso")
    
    # Testar informa√ß√µes da conta
    account_info = mt5.account_info()
    if not account_info:
        print("‚ùå N√£o foi poss√≠vel obter informa√ß√µes da conta")
        return False
    
    print(f"‚úÖ Conta: {account_info.login} - Saldo: ${account_info.balance:.2f}")
    print(f"‚úÖ Servidor: {account_info.server}")
    
    return True

def testar_simbolo():
    """Testar s√≠mbolo US100"""
    print("\n=== TESTE DE S√çMBOLO ===")
    
    symbol = "US100"
    
    # Verificar informa√ß√µes do s√≠mbolo
    symbol_info = mt5.symbol_info(symbol)
    if not symbol_info:
        print(f"‚ùå S√≠mbolo {symbol} n√£o encontrado")
        print("Tentando outros nomes...")
        
        # Tentar varia√ß√µes comuns
        symbols_to_try = [
            "US100", "US100.cash", "US100cash", "US100.CASH", 
            "NASDAQ100", "NQ100", "USTEC", "USATECH", "US-100"
        ]
        
        for sym in symbols_to_try:
            sym_info = mt5.symbol_info(sym)
            if sym_info:
                print(f"‚úÖ S√≠mbolo encontrado: {sym}")
                symbol = sym
                symbol_info = sym_info
                break
        else:
            print("‚ùå Nenhum s√≠mbolo relacionado encontrado")
            return False
    
    print(f"‚úÖ S√≠mbolo: {symbol_info.name}")
    print(f"‚úÖ Vis√≠vel: {symbol_info.visible}")
    print(f"‚úÖ Trade mode: {symbol_info.trade_mode}")
    print(f"‚úÖ Point: {symbol_info.point}")
    print(f"‚úÖ Stops level: {symbol_info.trade_stops_level}")
    
    if not symbol_info.visible:
        print("‚ö†Ô∏è  Aviso: S√≠mbolo n√£o est√° vis√≠vel no Market Watch")
        print("   Adicione o s√≠mbolo ao Market Watch no MT5")
    
    return symbol_info

def testar_preco_atual():
    """Testar obten√ß√£o de pre√ßo atual"""
    print("\n=== TESTE DE PRE√áO ATUAL ===")
    
    symbol = "US100"  # ou o s√≠mbolo encontrado no teste anterior
    
    # Tentar obter tick
    tick = mt5.symbol_info_tick(symbol)
    if not tick:
        print(f"‚ùå N√£o foi poss√≠vel obter tick para {symbol}")
        return None
    
    print(f"‚úÖ Pre√ßo atual: {tick.last}")
    print(f"‚úÖ Bid: {tick.bid}")
    print(f"‚úÖ Ask: {tick.ask}")
    print(f"‚úÖ Volume: {tick.volume}")
    
    return tick

def testar_hora_trading():
    """Verificar se √© hor√°rio de trading"""
    print("\n=== VERIFICA√á√ÉO DE HOR√ÅRIO DE TRADING ===")
    
    ny_tz = pytz.timezone('America/New_York')
    now_ny = datetime.now(ny_tz)
    current_time = now_ny.time()
    
    print(f"Hor√°rio atual (NY): {current_time}")
    print(f"Dia da semana (NY): {now_ny.weekday()} (0=Segunda, 6=Domingo)")
    
    # Verificar se √© fim de semana
    if now_ny.weekday() > 4:  # 5=S√°bado, 6=Domingo
        print("‚ùå Fim de semana - mercado fechado")
        return False
    
    # Hor√°rio de negocia√ß√£o (ajustado para hor√°rio NY)
    market_open = datetime.time(9, 30)   # 9:30 AM NY
    market_close = datetime.time(16, 0)  # 4:00 PM NY
    
    if market_open <= current_time <= market_close:
        print("‚úÖ Hor√°rio de trading - mercado aberto")
        return True
    else:
        print("‚ùå Fora do hor√°rio de trading")
        return False

def testar_ordem_simulada():
    """Testar execu√ß√£o de ordem simulada"""
    print("\n=== TESTE DE ORDEM SIMULADA ===")
    
    symbol = "US100"
    
    # Obter informa√ß√µes atuais
    tick = mt5.symbol_info_tick(symbol)
    if not tick:
        print("‚ùå N√£o foi poss√≠vel obter pre√ßo para teste de ordem")
        return False
    
    # Testar modo de preenchimento
    filling_modes = [
        mt5.ORDER_FILLING_RETURN,
        mt5.ORDER_FILLING_IOC,
        mt5.ORDER_FILLING_FOK,
        mt5.ORDER_FILLING_BOC
    ]
    
    for mode in filling_modes:
        try:
            request = {
                "action": mt5.TRADE_ACTION_DEAL,
                "symbol": symbol,
                "volume": 0.01,
                "type": mt5.ORDER_TYPE_BUY,
                "price": tick.ask,
                "deviation": 20,
                "magic": 888888,
                "comment": "Teste",
                "type_time": mt5.ORDER_TIME_GTC,
                "type_filling": mode,
            }
            
            # Testar apenas a verifica√ß√£o, n√£o executar
            check_result = mt5.order_check(request)
            if check_result:
                print(f"‚úÖ Modo {mode}: Retcode {check_result.retcode} - {check_result.comment}")
                if check_result.retcode == mt5.TRADE_RETCODE_DONE:
                    print(f"   - Ordem seria aceita com este modo: {mode}")
            else:
                print(f"‚ùå Modo {mode}: Resultado None - poss√≠vel problema de conex√£o")
                
        except Exception as e:
            print(f"‚ùå Modo {mode}: Erro - {e}")
    
    return True

def main():
    """Fun√ß√£o principal de depura√ß√£o"""
    print("[DEBUG] INICIANDO SCRIPT DE DEPURACAO")
    print("[DEBUG] Identificando por que os agentes nao estao negociando")
    
    try:
        # 1. Testar conex√£o b√°sica
        if not testar_conexao_basica():
            print("\nüí• Falha cr√≠tica na conex√£o - verifique credenciais e MT5")
            return
        
        # 2. Testar s√≠mbolo
        symbol_info = testar_simbolo()
        if not symbol_info:
            print("\nüí• S√≠mbolo n√£o encontrado - verifique nome e disponibilidade")
            return
        
        # 3. Testar pre√ßo
        tick = testar_preco_atual()
        if not tick:
            print("\nüí• N√£o foi poss√≠vel obter pre√ßo - verifique conex√£o")
            return
        
        # 4. Verificar hor√°rio
        trading_hour = testar_hora_trading()
        print(f"   Hor√°rio de trading: {trading_hour}")
        
        # 5. Testar ordens
        testar_ordem_simulada()
        
        print("\n[RESULTADO] TESTES CONCLUIDOS")
        print("\n[RESUMO]:")
        print(f"   - Conexao: OK")
        print(f"   - Simbolo: {'OK' if symbol_info else 'NOK'}")
        print(f"   - Preco: {'OK' if tick else 'NOK'}")
        print(f"   - Horario: {'OK' if trading_hour else 'NOK'}")
        
        print("\n[ANALISE] POSSIVEIS CAUSAS DO PROBLEMA:")
        
        if not trading_hour:
            print("   1. Fora do horario de trading")
        
        if not symbol_info.visible:
            print("   2. Simbolo nao esta visivel no Market Watch (adicione no MT5)")
        
        if symbol_info.trade_stops_level == 0:
            print("   3. Stops level e 0 - verifique configuracoes do simbolo")
        
        print("   4. Configuracoes de confianca muito altas nos agentes")
        print("   5. Sistema de protecao de circuit breaker ativado")
        print("   6. Modo de preenchimento incompativel")
        print("   7. Analise de mercado nao esta gerando sinais suficientes")
        
        print("\n[SOLUCOES] SOLUCOES SUGERIDAS:")
        print("   - Verifique se o simbolo esta no Market Watch do MT5")
        print("   - Confirme que esta dentro do horario de trading")
        print("   - Verifique as configuracoes de confianca (min_confidence)")
        print("   - Execute os sistemas em ordem: emergency_stop_loss.py, sistema_lucro_final.py")
        
    except Exception as e:
        print(f"\nüí• Erro durante depura√ß√£o: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()